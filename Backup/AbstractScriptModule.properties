deleteFileRpc.desc=Delete a file.
deleteFileRpc.param.parameters=A PyDictionary containing { \
area: 'unsecured', 'secured', or 'usb' \
areaPath: Path for a filename in the given area. \
}


getFileRpc.desc=Download a file.
getFileRpc.param.parameters=A PyDictionary containing { \
area: 'unsecured', 'secured', or 'usb' \
areaPath: Path for a filename in the given area. \
}


listDirectory.desc=Gets the list of files and subdirectories in the given directory.
listDirectory.param.parameters=A PyDictionary containing { \
area: 'unsecured', 'secured', or 'usb' \
areaPath: Path for directory or filename in the given area. \
}
listDirectory.returns=The list of files and subdirectories at the given path.


getPathInfo.desc=Gets info about the given path, which may be a file or directory.
getPathInfo.param.parameters=A PyDictionary containing { \
area: 'unsecured', 'secured', or 'usb' \
areaPath: Path for directory or filename in the given area. \
}
getPathInfo.returns=File details including file name, path, modified time (POSIX time), and size (bytes)


copyFile.desc=Copy a file.
copyFile.param.parameters=A PyDictionary containing { \
srcArea: 'unsecured', 'secured', or 'usb' \
srcAreaPath: Path for the source filename in the given area. \
destArea: One of 'unsecured', 'secured', or 'usb'. \
destAreaPath: Path for directory in the given area. \
}


moveFile.desc=Move a file.
moveFile.param.parameters=A PyDictionary containing { \
srcArea: 'unsecured', 'secured', or 'usb' \
srcAreaPath: Path for the source filename in the given area. \
destArea: One of 'unsecured', 'secured', or 'usb'. \
destAreaPath: Path for directory in the given area. \
}


uploadFile.desc=Add a new file (up to 20M) or update an existing file with the same name.
uploadFile.param.parameters=A PyDictionary containing { \
area: 'unsecured', 'secured', or 'usb' \
areaPath: Path for directory or filename in the given area. \
}


getChannelDescriptions.desc=Returns all Channel Descriptions.
getChannelDescriptions.returns=All channel descriptions.


getChannelDescription.desc=Returns the Channel Description for the given Channel Type ID.
getChannelDescription.param.parameters=A PyDictionary containing { \
channelId: A string of the hexadecimal value for the Channel Type ID. For example, "0x60000002". \
}
getChannelDescription.returns=The channel description for the given Channel Type ID.


getModuleDescriptions.desc=Returns all Module Descriptions.
getModuleDescriptions.returns=All module descriptions.


getModuleDescription.desc=Returns the Module Description for the given module ID or product number.
getModuleDescription.param.parameters=A PyDictionary containing { \
module: The module ID (e.g. "0x90000014") or module product number (e.g. "GRV-OAC-12-I"). \
}
getModuleDescription.returns=Module description.


getIoConfiguration.desc=Returns the I/O Unit configuration. These are settings that affect all of the I/O modules and channels.
getIoConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getIoConfiguration.returns= I/O Unit configuration object.

setIoConfiguration.desc=Set the selected devices I/O configuration.
setIoConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}


setIoConfigurationOpCode.desc=Send an Operation Code to the I/O unit.
setIoConfigurationOpCode.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}


getIoInfo.desc=Returns information about the I/O unit.
getIoInfo.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getIoInfo.returns=Successful operation.


getModuleAnalogChannelValues.desc=Returns the channel values of an analog module. This is the most efficient way to get all the analog values. It uses a packed area of the I/O memory map. Additional information about a channel is available on a channel by channel basis.
getModuleAnalogChannelValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channels: The number of channels to return. It must be between 1 and 64. Defaults to 32 if not provided. \
}
getModuleAnalogChannelValues.returns=successful operation


setAnalogChannelValue.desc=Set the value of the analog channel.
setAnalogChannelValue.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


getChannelAnalogStatus.desc=Returns the current status of the analog fields for the given channel. \
Does not confirm that an analog module is plugged in at the given index.
getChannelAnalogStatus.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}
getChannelAnalogStatus.returns= Current status of the analog channel as AnalogChannelRead object.


clearAnalogChannelMinValue.desc=Clear the analog channel's minimum value.
clearAnalogChannelMinValue.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


clearAnalogChannelMaxValue.desc=Clear the analog channel's maximum value.
clearAnalogChannelMaxValue.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


getChannelConfiguration.desc=Get the channel configuration of the selected I/O device.
getChannelConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}
getChannelConfiguration.returns= Current channel configuration as ChannelConfig object.


setChannelConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


setDigitalChannelCounterActive.desc=Activates or deactivates a digital channel counter. Has no affect on other digital input features.
setDigitalChannelCounterActive.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


clearDigitalChannelFeature.desc=Clears the digital channel feature and restarts the measurement.
clearDigitalChannelFeature.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


clearDigitalChannelOffLatch.desc=Clears the off-latch of the digital channel.
clearDigitalChannelOffLatch.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


clearDigitalChannelOnLatch.desc=Clears the on-latch of the digital channel.
clearDigitalChannelOnLatch.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


setDigitalChannelState.desc=Get the current state of the digital channel.
setDigitalChannelState.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}


getChannelDigitalStatus.desc=Returns the current status of the digital fields for the given channel.\
Does not confirm that a digital module is plugged in at the given index.
getChannelDigitalStatus.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
channelIndex: The index of the channel, between 0 and one less than the number of channels on the current module. \
}
getChannelDigitalStatus.returns=Current status of the digital fields as a DigitalChannelRead object.


getChannelNames.desc=Returns the channel names for the given module.
getChannelNames.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
}
getChannelNames.returns=The names for the given module index.


getModuleConfiguration.desc=Returns the configuration for the given module.
getModuleConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
}
getModuleConfiguration.returns=The current module configuration as a ModuleChannelConfig object.


getModuleDigitalChannelValues.desc=Returns all the channel values of a digital module. This is the most efficient way to get all the digital values. It uses a packed area of the I/O memory map. Additional information about a channel is available on a channel by channel basis.
getModuleDigitalChannelValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
}
getModuleDigitalChannelValues.returns=successful operation


getModuleInfo.desc=Returns information about the module at the given slot index.
getModuleInfo.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
moduleIndex: The index of the module, between 0 and 15. \
}
getModuleInfo.returns=Information about the module as a ModuleInfo object.


getModuleQualityFlags.desc=Returns quality flags for all the module slots on the rack.
getModuleQualityFlags.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getModuleQualityFlags.returns=Quality flags for all module slots on the rack as a module quality flags object.


getModuleTypes.desc=Returns all the types of modules plugged into the rack.
getModuleTypes.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getModuleTypes.returns=All module types plugged into the rack.


getModuleInfos.desc=Returns information about all the modules plugged into the rack.
getModuleInfos.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getModuleInfos.returns=Information about all the modules plugged into the rack.


setMmpValues.desc=Writes to one or more OptoMMP memory map addresses.
setMmpValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}


getMmpValues.desc=Returns one or more values at the given OptoMMP memory map address.
getMmpValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
address: A hexadecimal address. For example, "0xF0D81100". \
type: One of 'int8', 'uint8', 'int32', 'uint32', 'int64', 'uint64', 'float', 'string'. This is how the raw memory will be interpreted. \
length: For numbers, this is the number of elements to return. It must be 256 or less, except int64 and uint64 must be 128 or less. For a string, this is the number of bytes to read, and must be 1024 or less. \
encoding: One of 'ascii' or 'utf8'. This is how the raw memory will be interpreted. \
}
getMmpValues.returns=One or more values at the given OptoMMP memory map address.


setMmpValue.desc=Writes a value at the given OptoMMP memory map address.
setMmpValue.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
address: A hexadecimal address. For example, "0xF0D81100". \
}


setScratchPadValues.desc=Writes to one or more scratch pad elements.
setScratchPadValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
datatype: One of 'int32', 'int64', 'float', or 'string' \
}


getScratchPadValues.desc=Returns one or more values at the given OptoMMP memory map address.
getScratchPadValues.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
datatype: One of 'int32', 'int64', 'float', or 'string' \
index: The scratch pad index. \
length: The number of elements to return. It must be between 1 and 256. Default to 1 if not provided. \
encoding: One of 'ascii' or 'utf8'. This is how the raw memory will be interpreted. \
}
getScratchPadValues.returns=One or more values at the given OptoMMP memory map address.


setScratchPadValue.desc=Writes a value at the given scratch pad index.
setScratchPadValue.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
datatype: One of 'int32', 'int64', 'float', or 'string' \
index: The scratch pad index. \
}

getPidConfigurations.desc=Gets the current PID configuration settings.
getPidConfigurations.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
}
getPidConfigurations.returns=Current PID configurations as a PidConfigs object.

getPidConfiguration.desc=Gets the current configuration of the selected PID.
getPidConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
pidIndex: The index of the PID loop, between 0 and 96. \
}
getPidConfiguration.returns=Current configuration of selected PID as a PidConfig object.


setPidConfiguration.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
pidIndex: The index of the PID loop, between 0 and 96. \
}

getPidStatus.desc=Gets the status of the selected PID.
getPidStatus.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
pidIndex: The index of the PID loop, between 0 and 96. \
}
getPidStatus.returns=The selected PIDS status as a PidStatus object.


setPidStatus.param.parameters=A PyDictionary containing { \
device: The name of the device. Use "local" for the built-in rack of I/O. \
pidIndex: The index of the PID loop, between 0 and 96. \
}


enableOpenVpn.desc=Enable or disable the OpenVPN client.
enableOpenVpn.param.enable= A PyDictionary containing { \
value: A boolean indicating if OpenVPN should be enabled or not. \
}


getPortForwardRules.desc=[EPIC ONLY] Returns the array of port forward rules.
getPortForwardRules.returns=The array of new port forward rules or an empty array.


overwritePortForwardRules.desc=[EPIC ONLY] Overwrites the array of port forwarding rules.
overwritePortForwardRules.param.rulesArray=The array of new port forward rules or an empty array.

